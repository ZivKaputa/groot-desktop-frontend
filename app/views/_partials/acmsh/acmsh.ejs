<script type="text/javascript">
class ACMsh {
    constructor() {
        this.input = "";
        this.display = "";
        this.cursor_alt = false;
        this.history = [''];
        this.history_pos = 0;
        this.cursor_pos = 0

        window.addEventListener("keydown", function(e) {
            // space and arrow keys
            if([' ', 'Backspace', 'ArrowUp', 'ArrowLeft', 'ArrowRight', 'ArrowDown'].indexOf(e.key) > -1) {
                e.preventDefault();
            }
        }, false);

        document.addEventListener('keydown', (event) => {
            switch (event.key) {
                case "ArrowUp":
                    if (this.history_pos < this.history.length) {
                        this.history_pos += 1;
                        this.input = this.history[this.history.length - this.history_pos];
                    }
                    break;

                case "ArrowDown":
                    if (this.history_pos > 0) {
                        this.history_pos -= 1;
                        var next = this.history.length - this.history_pos;
                        this.history.push("")
                        this.input = this.history[next];
                        this.history.pop();
                    }
                    break;
                
                case "ArrowLeft":
                    if (this.cursor_pos > 0) {
                        this.cursor_pos -= 1
                    }
                    break;

                case "ArrowRight":
                    if (this.cursor_pos <= this.input.length) {
                        this.cursor_pos += 1
                    }
                    break;

                case "Enter":
                    this.exec();
                    break;
                case "Backspace":
                    var in_bef = this.input.substring(0, this.cursor_pos);
                    var in_aft = this.input.substring(this.cursor_pos);
                    this.input = in_bef.slice(0, -1) + in_aft;
                    if (this.cursor_pos > 0) {
                        this.cursor_pos -= 1
                    }
                    break;
                case "Escape":
                    break;
                case "Tab":
                    /*TODO: add tab complete*/
                    break;
                case "CapsLock":
                    break;
                case "Control":
                    break;
                case "Alt":
                    break;
                case "Meta":
                    break;
                case "Shift":
                    break;
                case "Shift":
                    break;
                case "Shift":
                    break;
                default:
                    var in_bef = this.input.substring(0, this.cursor_pos);
                    var in_aft = this.input.substring(this.cursor_pos);
                    this.input = in_bef + event.key + in_aft;
                    this.history_pos = 0;
                    this.cursor_pos += 1
                return; 
            }
        }, false);
    }

    exec() {
        this.history.push(this.input);

        /*TODO: escape characters*/
        var tokens = this.input.match(/(?:[^\s"]+|"[^"]*")+/g);
        var cmd = tokens[0];
        var args = tokens.slice(1, tokens.length);
        for (var a = 0; a < args.length; a++) {
            if (args[a][0] === '"') {
                args[a] = args[a].slice(1, -1);
            }
        }
        if (cmd in bin) {
            term_state = term.EXEC;
            bin[cmd](args);
        } else {
            term_state = term.WAITING;
            terminal.textContent = `command ${cmd} not found`;
            setTimeout(function () {
                    term_state = term.LIVE;
                    thread(acmsh); //Note: this is hardcoded for groot, change to the instance of the shell
            }, 1000);
        }
        this.input = ""
    }
    
    shell() {
        this.cursor();    
        terminal.textContent = this.display;
    }

    cursor() {
        if (this.cursor_alt) {
            var in_bef = this.input.substring(0, this.cursor_pos);
            var in_aft = this.input.substring(this.cursor_pos);
            this.display = in_bef + '\u2593' + in_aft.slice(1, in_aft.length);
        } else {
            this.display = this.input;
        }
        this.cursor_alt = !(this.cursor_alt);
    }

    static return(delay) {
        if (typeof delay === 'undefined') { delay = 0; }
        setTimeout(function () {
            term_state = term.LIVE;
            thread(acmsh);  //Note: this is hardcoded for groot, change to the instance of the shell
        }, delay);
    }
}
</script>